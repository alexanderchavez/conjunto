package palabras;

import java.io.*;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.TreeSet;
import java.util.regex.Pattern;

/**
 *
 * @author DELL
 */
public class Palabras {

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    static ArrayList ag = new ArrayList();
    static File c = new File("C:\\Users\\DELL\\Desktop\\howto\\");

    public static void main(String[] args) throws IOException {
        //  String a = "";
        // directorio(c, a);
        // palabras(c);
        // System.out.println(caracteres(c)); 
        //contarp(ag);
        //  palabras(c);
        //escribirfile("Archivog", ag);
        //  escribirfile("Accessibility-HOWTO",x);
        ArrayList n = new ArrayList();
        HashSet<String> tset = new HashSet<String>();

        // add elements to HashSet 
        tset.add("geeks");
        tset.add("for");
        tset.add("practice");
        tset.add("contribute");

        // Duplicate removed 
        tset.add("geeks");
        ArrayList na = new ArrayList();
        na.add("geeks");
        na.add("A");
        na.add("g0eeks");
        na.add("AAAA");
        na.add("GGG");
        na.add("GGGGG");
        na.add("practice");
        na.add("contribute");
        n=interseccion(tset,na);
        for (int i = 0; i < n.size(); i++) {
            System.out.println(n.get(i));
        }
        
    }

    public static void palabras(File archivo) throws IOException {
        String cadena;
        int caracteres = caracteres(archivo);
        ArrayList ar = new ArrayList();
        int palabras = 0;
        int linea = 0;
        String h[];
        FileReader f = new FileReader(archivo);
        BufferedReader b = new BufferedReader(f);
        while ((cadena = b.readLine()) != null) {
            h = cadena.trim().split("[^a-zA-Z{3,9}]");
            for (int i = 0; i < h.length; i++) {
                if (Pattern.matches("[a-zA-Z]{3,9}", h[i])) {
                    // System.out.println(h[i]);
                    //ar.add(h[i]);
                    ag.add(h[i]);
                    palabras++;
                }
            }
            linea++;
        }

        System.out.println(linea + "    " + palabras + "   " + caracteres + "   " + archivo.getName());

        /* System.out.println("lineas " + linea);
        System.out.println("Palabras repetidas ");*/
        contarp(ar);
        //return contarp(ar);
    }

    public static int caracteres(File f) throws FileNotFoundException, IOException {
        FileReader fr;
        int caract;
        int c = 0;
        fr = new FileReader(f);
        caract = fr.read();
        while (caract != -1) {
            c++;
            caract = fr.read();
        }
        return c;
    }

    public static void contarp(ArrayList a) {
        ArrayList nw = new ArrayList();
        HashSet<String> h = new HashSet(a);
        Iterator iterator = h.iterator();
        String palabra;
        int contador = 0;
        while (iterator.hasNext()) {
            palabra = (String) iterator.next();
            for (int i = 0; i < a.size(); i++) {
                if (palabra.equals(a.get(i))) {
                    contador++;
                }
            }
            // nw.add(palabra+"         "+contador);

            System.out.println(palabra + ":  " + contador);
            contador = 0;
        }
        // return nw;
    }

    public static void escribirfile(String nombre, ArrayList p) throws IOException {
        // File d = new File("C:\\Users\\DELL\\Desktop\\Howto-H-P");

        //d.mkdirs();
        //  String ruta = "C:\\Users\\DELL\\Desktop\\Howto-H-P"+nombre+"H-p.txt";
        String ruta = "C:\\Users\\DELL\\Desktop\\Howto-H-P\\" + nombre + "H-p.txt";
        File archivo = new File(ruta);
        BufferedWriter bw;
        if (archivo.exists()) {
            bw = new BufferedWriter(new FileWriter(archivo));
            for (int i = 0; i < p.size(); i++) {
                bw.write((String) p.get(i));
                bw.newLine();
            }
        } else {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write("Acabo de crear el fichero de texto.");
            for (int i = 0; i < p.size(); i++) {
                bw.write((String) p.get(i));
                bw.newLine();
            }
        }
        bw.close();

    }

    public static void directorio(File file, String files) throws IOException {
        ArrayList contenido = new ArrayList();
        File[] listOfFiles = file.listFiles();

        for (int i = 0; i < listOfFiles.length; i++) {

            if (listOfFiles[i].isFile()) {
                files = "A :" + listOfFiles[i].getName();
                System.out.println(files);
                // System.out.println(listOfFiles[i].getPath());
                //  System.out.println(listOfFiles[i].getName());
                //   contenido=palabras(listOfFiles[i]);
                palabras(listOfFiles[i]);
                // escribirfile(listOfFiles[i].getName(),contenido);
            }
            if (listOfFiles[i].isDirectory()) {
                System.out.println("D :" + listOfFiles[i].getPath());
                directorio(listOfFiles[i], listOfFiles[i].getPath());

            }
        }

    }

    private static HashSet<String> union(TreeSet iter, ArrayList<String> segundo) {
        HashSet i = new HashSet(segundo);
        for (String worte : segundo) {
            if (!iter.contains(worte)) {
                iter.add(worte);
            }
        }
        return i;
    }

    public static ArrayList<String> interseccion(HashSet<String> iter, ArrayList<String> segundo) {
        ArrayList c=new ArrayList();
        TreeSet<String> tset = new TreeSet<String>(segundo);
        String p;
         String pa;
        if (iter.size() > tset.size()) {
            Iterator iterator = iter.iterator(); 
            while(iterator.hasNext()){
                p=(String) iterator.next();
                Iterator iterato = tset.iterator(); 
                while(iterato.hasNext()){
                    pa=(String) iterato.next();
                    if (p.equals(pa)) {
                        c.add(p);
                    }
                }
            }
        } else {
            Iterator iterator = tset.iterator(); 
            while(iterator.hasNext()){
                p=(String) iterator.next();
                Iterator iterato = iter.iterator(); 
                while(iterato.hasNext()){
                    pa=(String) iterato.next();
                    if (p.equals(pa)) {
                        c.add(p);
                    }
                }
            }
        }

        return c;
    }
}
